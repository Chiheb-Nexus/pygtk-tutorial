<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="table">
    <title>Table</title>
    <para>Using tables, we can create a grid in which to pack widgets. This is useful in certain circumstances where we require a neat layout with correctly aligned child widgets.</para>
    <simplesect>
        <title>Constructor</title>
        <programlisting>table = gtk.Table(rows, columns, homogeneous)</programlisting>
        <para>The rows and columns property is an integer value of how many rows and columns we want our table to have. The homogeneous value is a Boolean which when set to True, all the cells will be the same size regardless of the size of the child widget. All cells also take the size of the largest cell.</para>
    </simplesect>
    <simplesect>
        <title>Methods</title>
        <para>The following method is used to attach child widgets to the table:</para>
        <programlisting>table.attach(child, left, right, top, bottom, xoptions, yoptions, xpadding, ypadding)</programlisting>
        <para>The child property is the child which should be added to the table. The left, right, top and bottom values are the co-ordinates of the cell which the child should be attached to. As an example, if we have a 2x2 table, it would look as follows:</para>
        <programlisting>  0          1          2
0 +----------+----------+
  |          |          |
1 +----------+----------+
  |          |          |
2 +----------+----------+</programlisting>
        <para>Now we would wish to add a label to the top-left cell. In this case, our left, right, top and bottom values would be 0, 1, 0, 1. The numbers entered are the boundaries of where the child widget should be placed. Consider a second example, we wish to have a child widget which spans the entire bottom row, our number again would be 0, 2, 1, 2. Child widgets can cover any number of cells, allowing us to create dynamic interfaces.</para>
        <para>Continuing on, the xoptions and yoptions property allows us to specify how the child widget behaves depending on its size compared to the cell. Both xoptions and yoptions can take the following values:</para>
        <programlisting>gtk.FILL
gtk.SHRINK
gtk.EXPAND</programlisting>
        <para>The gtk.FILL value increases a widget to take up all available cell space. When using gtk.EXPAND, the widget is expanded sideways to fill up the width of the cell. gtk.SHRINK on the other hand reduces the size allocated to the widget to prevent it from moving off screen. It is possible to use more than one value by using the "|" (pipe) character.</para>
        <para>Finally, the xpadding and ypadding properties are also integer values. They create an empty border around the child widget.</para>
        <para>Note: the xoptions, yoptions, xpadding and ypadding values are all optional.</para>
        <para>Another useful method may be to specify space between rows and columns. This can be done using:</para>
        <programlisting>table.set_row_spacing(row, spacing)
table.set_col_spacing(col, spacing)</programlisting>
        <para>The above should be used when you wish to specify the spacings of an individual number of rows. Alternatively, you may wish to specify a consistent spacing across all rows and columns in the table. To do this:</para>
        <programlisting>table.set_row_spacings(spacing)
table.set_col_spacings(spacing)</programlisting>
    </simplesect>
    <simplesect>
        <title>Example</title>
        <programlisting>#!/usr/bin/env python

import gtk

class Table:
    def __init__(self):
        window = gtk.Window()
        window.set_default_size(200, 150)
        table = gtk.Table(3, 3, True)
        
        button1 = gtk.Button("Button 1")
        button2 = gtk.Button("Button 2")
        button3 = gtk.Button("Button 3")
        button4 = gtk.Button("Button 4")
        button5 = gtk.Button("Button 5")
        
        window.add(table)
        table.attach(button1, 0, 1, 0, 1)
        table.attach(button2, 1, 3, 0, 1)
        table.attach(button3, 0, 1, 1, 3)
        table.attach(button4, 1, 3, 1, 2)
        table.attach(button5, 1, 2, 2, 3)
        
        window.connect("destroy", lambda w: gtk.main_quit())
        
        window.show_all()

Table()
gtk.main()</programlisting>
        <para>Download: <ulink url="examples/table.py">table.py</ulink></para>
     </simplesect>
</chapter>
