<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="plugssockets">
    <title>Plug &amp; Socket</title>
    <para>The combination of Plug and Socket objects allow the embedding of an interface from one process into another. It is not commonly used except in specific circumstances where the interface needs to be separated by process.</para>
    <para>Note: using Plug and Socket objects can be highly beneficial in some circumstances. They do however pose problems for beginners as they make debugging the application very difficult. A spelling mistake or incorrect statement can lead to a long debugging process due to having to spot an error in one or both of the files.</para>
    <sect1 id="plug">
        <title>Plug</title>
        <simplesect>
            <title>Constructor</title>
            <programlisting>plug = gtk.Plug(socket_id)</programlisting>
            <para>The socket_id argument allows for an ID number to be specified, which sets up the connection to a previously created Socket. As we have not yet created a Socket, this will be left empty.</para>
        </simplesect>
        <simplesect>
            <title>Methods</title>
            <para>After construction of the Plug, we will need to retrieve the ID number.</para>
            <programlisting>plug_id = plug.get_id()</programlisting>
            <para>Checking whether a plug has been inserted or not can be done with the method:</para>
            <programlisting>embedded = plug.get_embedded()</programlisting>
            <para>If the plug is embedded into a Socket, the embedded value returned will be True. If not, False is returned.</para>
        </simplesect>
        <simplesect>
            <title>Signals</title>
            <programlisting>"embedded" (plug)</programlisting>
            <para>The "embedded" signal is emitted by the Plug object when it is inserted into a Socket.</para>
        </simplesect>
    </sect1>
    <sect1 id="socket">
        <title>Socket</title>
        <simplesect>
            <title>Constructor</title>
            <programlisting>socket = gtk.Socket(plug_id)</programlisting>
            <para>Note: we have created the Plug and then the Socket. However, this process can be reversed depending on how you are constructing the interface and any individual requirements you may have.</para>
        </simplesect>
        <simplesect>
            <title>Methods</title>
            <para>To retrieve the ID number of the Socket, the following method can be called.</para>
            <programlisting>socket_id = socket.get_id()</programlisting>
        </simplesect>
        <simplesect>
            <title>Signals</title>
            <programlisting>"plug-added" (socket)
"plug-removed" (socket)</programlisting>
            <para>When a Plug is inserted into a Socket, the "plug-added" signal is emitted from the Socket. Removal of a Plug also emits the "plug-removed" signal.</para>
        </simplesect>
    </sect1>
    <sect1 id="plugsocketexample">
        <title>Example</title>
        <simplesect>
            <title>Instructions</title>
            <para>To use this example, there are two ways to run. It is necessary to run the scripts from the terminal to see all output.</para>
            <para>Starting the socket first, open a terminal and enter:</para>
            <programlisting>python socket.py</programlisting>
            <para>Once the socket is running, an ID number will be printed. Open another terminal and enter the following (replacing the number below with the number outputted when running the socket):</para>
            <programlisting>python plug.py 1234567890</programlisting>
            <para>Alternatively, we can start the plug first. Open a terminal and enter:</para>
            <programlisting>python plug.py</programlisting>
            <para>Once run, the terminal will display an ID number. Again, open another terminal window (replace the number below with the number outputted when running the plug):</para>
            <programlisting>python socket.py 1234567890</programlisting>
            <para>If everything worked correctly, you should see a GTK+ Window which contains an Entry, with some text in that Entry. Quitting the window will cause both the Plug and Socket to close together.</para>
        </simplesect>
        <simplesect>
            <title>Plug Example</title>
            <programlisting>#!/usr/bin/env python

import gtk, sys

class Plug:
    def __init__(self):
        Wid = 0L
        if len(sys.argv) == 2:
            Wid = long(sys.argv[1])
        
        plug = gtk.Plug(Wid)
        print "Plug ID:", plug.get_id()
        
        entry = gtk.Entry()
        entry.set_text("PyGTK Plug &amp; Socket")
        
        plug.connect("embedded", self.embed_event)
        plug.connect("destroy", lambda w: gtk.main_quit())
        entry.connect("activate", self.entry_changed)
        
        plug.add(entry)
        plug.show_all()
        
    def embed_event(self, widget):
        print "A plug has been embedded."
    
    def entry_changed(self, widget):
        print "Entry text has been changed to:", widget.get_text()

Plug()
gtk.main()</programlisting>
            <para>Download <ulink url="examples/plug.py"><command>plug.py</command></ulink></para>
        </simplesect>
        <simplesect>
            <title>Socket Example</title>
            <programlisting>#!/usr/bin/env python

import gtk, sys, string

class Socket:
    def __init__(self):
        window = gtk.Window()     
        window.set_default_size(200, 200) 
        
        socket = gtk.Socket()
        window.add(socket)
        print "Socket ID:", socket.get_id()
        
        if len(sys.argv) == 2:
            socket.add_id(long(sys.argv[1]))
        
        window.connect("destroy", lambda w: gtk.main_quit())
        socket.connect("plug-added", self.plugged_event)
        
        window.show_all()
    
    def plugged_event(self, widget):
        print "A plug has been inserted."

Socket()
gtk.main()</programlisting>
            <para>Download <ulink url="examples/socket.py"><command>socket.py</command></ulink></para>
        </simplesect>
    </sect1>
</chapter>
