<?xml version="1.0" standalone="no"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
    "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">

<chapter id="drawingarea">
    <title>Drawing Area</title>
    <para>A Drawing Area widget allows for custom interface elements to be created. The Drawing Area widget contains a Window which can be manipulated in much the same way, however also supports drawing of items such as lines and shapes, along with a variety of styling options.</para>
    <simplesect>
        <title>Constructor</title>
        <programlisting>drawingarea = gtk.DrawingArea()</programlisting>
    </simplesect>
    <simplesect>
        <title>Methods</title>
        <para>After construction of the Drawing Area, it is useful to set a size. By default this is 0x0 pixels however can be changed with:</para>
        <programlisting>drawingarea.set_size_request(width, height)</programlisting>
        <para>It should be noted that setting a size is optional as the Drawing Area will adjust the size depending on the content it is displaying.</para>
        <para>The Drawing Area is a blank widget which can be drawn on. To access the window contained within the widget:</para>
        <programlisting>drawwindow = drawingarea.window</programlisting>
        <para>A range of methods can be applied to a Drawing Area window to control the drawings it contains. Some of the basic control methods are:</para>
        <programlisting>drawwindow.show()
drawwindow.hide()
drawwindow.set_title(title)
drawwindow.move(width, height)
drawwindow.resize(width, height)
drawwindow.clear()
drawwindow.destroy()</programlisting>
        <para>A range of styling methods can be set on the Drawing Area window:</para>
        <programlisting>drawwindow.set_background(gtk.gdk.Color(r, g, b))
drawwindow.set_opacity(opacity)</programlisting>
        <para>When using the .set_background() method, the r, g, b values should be set between 0 and 65535. The .set_opacity() method requires a value between 0 (for transparent) and 1 (for opaque).</para>
        <para>To prevent updates being made to the Drawing Area:</para>
        <programlisting>drawwindow.freeze_updates()</programlisting>
        <para>Once the .freeze_updates() method has been called, the following is required to enable updates to be made again:</para>
        <programlisting>drawwndow.thaw_updates()</programlisting>
    </simplesect>
    <simplesect>
        <title>Example</title>
        <programlisting>#!/usr/bin/env python

import gtk

class DrawingArea:
    def __init__(self):
        window = gtk.Window()
        window.set_default_size(380, 220)
           
        self.drawingarea = gtk.DrawingArea()
        self.pangolayout = self.drawingarea.create_pango_layout("")
        
        window.connect("destroy", lambda w: gtk.main_quit())
        self.drawingarea.connect("expose-event", self.area_expose_cb)
        
        window.add(self.drawingarea)
        window.show_all()

    def area_expose_cb(self, area, event):
        self.style = self.drawingarea.get_style()
        self.gc = self.style.fg_gc[gtk.STATE_NORMAL]
        self.draw_point(10,10)
        self.draw_points(110, 10)
        self.draw_line(210, 10)
        self.draw_lines(310, 10)
        self.draw_segments(10, 110)
        self.draw_rectangles(110, 110)
        self.draw_arcs(210, 110)
        self.draw_polygon(310, 110)

    def draw_point(self, x, y):
        self.drawingarea.window.draw_point(self.gc, x+30, y+30)
        self.pangolayout.set_text("Point")
        self.drawingarea.window.draw_layout(self.gc, x+5, y+50, self.pangolayout)

    def draw_points(self, x, y):
        points = [(x+10,y+10), (x+10,y), (x+40,y+30), (x+30,y+10), (x+50,y+10)]
        self.drawingarea.window.draw_points(self.gc, points)
        self.pangolayout.set_text("Points")
        self.drawingarea.window.draw_layout(self.gc, x+5, y+50, self.pangolayout)

    def draw_line(self, x, y):
        self.drawingarea.window.draw_line(self.gc, x+10, y+10, x+20, y+30)
        self.pangolayout.set_text("Line")
        self.drawingarea.window.draw_layout(self.gc, x+5, y+50, self.pangolayout)

    def draw_lines(self, x, y):
        points = [(x+10,y+10), (x+10,y), (x+40,y+30), (x+30,y+10), (x+50,y+10)]
        self.drawingarea.window.draw_lines(self.gc, points)
        self.pangolayout.set_text("Lines")
        self.drawingarea.window.draw_layout(self.gc, x+5, y+50, self.pangolayout)

    def draw_segments(self, x, y):
        segments = ((x+20,y+10, x+20,y+70), (x+60,y+10, x+60,y+70), (x+10,y+30 , x+70,y+30), (x+10, y+50 , x+70, y+50))
        self.drawingarea.window.draw_segments(self.gc, segments)
        self.pangolayout.set_text("Segments")
        self.drawingarea.window.draw_layout(self.gc, x+5, y+80, self.pangolayout)

    def draw_rectangles(self, x, y):
        self.drawingarea.window.draw_rectangle(self.gc, False, x, y, 80, 70)
        self.drawingarea.window.draw_rectangle(self.gc, True, x+10, y+10, 20, 20)
        self.drawingarea.window.draw_rectangle(self.gc, True, x+50, y+10, 20, 20)
        self.drawingarea.window.draw_rectangle(self.gc, True, x+20, y+50, 40, 10)
        self.pangolayout.set_text("Rectangles")
        self.drawingarea.window.draw_layout(self.gc, x+5, y+80, self.pangolayout)

    def draw_arcs(self, x, y):
        self.drawingarea.window.draw_arc(self.gc, False, x+10, y, 70, 70, 0, 360*64)
        self.drawingarea.window.draw_arc(self.gc, True, x+30, y+20, 10, 10, 0, 360*64)
        self.drawingarea.window.draw_arc(self.gc, True, x+50, y+20, 10, 10, 0, 360*64)
        self.drawingarea.window.draw_arc(self.gc, True, x+30, y+10, 30, 50, 210*64, 120*64)
        self.pangolayout.set_text("Arcs")
        self.drawingarea.window.draw_layout(self.gc, x+5, y+80, self.pangolayout)

    def draw_polygon(self, x, y):
        points = [(x+10,y+60), (x+10,y+20), (x+40,y+70), (x+30,y+30), (x+50,y+40)]
        self.drawingarea.window.draw_polygon(self.gc, True, points)
        self.pangolayout.set_text("Polygon")
        self.drawingarea.window.draw_layout(self.gc, x+5, y+80, self.pangolayout)

DrawingArea()
gtk.main()</programlisting>
        <para>Download: <ulink url="examples/drawingarea.py"><command>drawingarea.py</command></ulink></para>
    </simplesect>
</chapter>
